clickhouse:
  # -- Container image used by ClickHouse.
  image: 
    repository: "projects.registry.vmware.com/antrea/theia-clickhouse-server"
    pullPolicy: "IfNotPresent"
    tag: ""
  logger:
    # -- Logging level. Acceptable values: trace, debug, information, warning, error.
    level: information
    # --  Size of log files. Applies to log and errorlog. Once the file reaches size,
    # ClickHouse archives and renames it, and creates a new log file in its place.
    size: 100M
    # -- The number of archived log files that ClickHouse stores.
    count: 4
  monitor:
    # -- Determine whether to run a monitor to periodically check the ClickHouse
    # memory usage and clean data.
    enable: false
    # -- The storage percentage at which the monitor starts to delete old records.
    # Vary from 0 to 1.
    threshold: 0.5
    # -- The percentage of records in ClickHouse that will be deleted when the
    # storage grows above threshold. Vary from 0 to 1.
    deletePercentage: 0.5
    # -- The time interval between two round of monitoring. Can be a plain integer
    # using one of these unit suffixes ns, us (or µs), ms, s, m, h.
    execInterval: "1m"
    # -- The number of rounds for the monitor to stop after a deletion to wait for
    # the ClickHouse MergeTree Engine to release memory.
    skipRoundsNum: 3
    # -- Container image used by the ClickHouse Monitor.
    image:
      repository: "projects.registry.vmware.com/antrea/theia-clickhouse-monitor"
      pullPolicy: "IfNotPresent"
      tag: ""
  # -- Credentials to connect to ClickHouse. They will be stored in a secret.
  connectionSecret:
    username : "clickhouse_operator"
    password: "clickhouse_operator_password"
  service:
    # -- The type of Service exposing ClickHouse. It can be one of ClusterIP,
    # NodePort or LoadBalancer.
    type: ClusterIP
    # -- TCP port number for the ClickHouse service.
    tcpPort: 9000
    # -- HTTP port number for the ClickHouse service.
    httpPort: 8123
  # -- Time to live for data in the ClickHouse. Can be a plain integer using
  # one of these unit suffixes SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER,
  # YEAR.
  ttl: 1 WEEK
  storage:
    # -- ClickHouse storage size. Can be a plain integer or as a fixed-point
    # number using one of these quantity suffixes: E, P, T, G, M, K. Or the
    # power-of-two equivalents: Ei, Pi, Ti, Gi, Mi, Ki.
    size: "8Gi"
    createPersistentVolume:
      # -- Type of PersistentVolume. Can be set to "Local" or "NFS". Please set
      # this value to use a PersistentVolume created by Theia.
      type: ""
      local:
        # -- The local path. Required when type is "Local".
        path: "/data/clickhouse"
        # -- Affinity for the Local PersistentVolume. By default it requires to
        # label the Node used to store the ClickHouse data with
        # "antrea.io/clickhouse-data-node=".
        affinity: {}
        # -- A list of Node hostnames. Required when type is "Local". Please make
        # sure to provide (shards * replicas) Nodes. Each Node should meet affinity
        # and have the path created on it.
        nodes:
          - kind-worker
      nfs:
        # -- A list of addresses for NFS shares in the format hostname:path, where
        # hostname refers to NFS server hostname or IP address, and path refers
        # to the path exported on the NFS server. Please provide (shards * replicas)
        # addresses.
        addresses:
          - nfs.svc.cluster.local:/data
    # -- Specification for PersistentVolumeClaim. This is ignored if
    # createPersistentVolume.type is non-empty. To use a custom PersistentVolume,
    # please set
    # storageClassName: ""
    # volumeName: "<my-pv>".
    # To dynamically provision a PersistentVolume, please set
    # storageClassName: "<my-storage-class>".
    # Memory storage is used if both createPersistentVolume.type and
    # persistentVolumeClaimSpec are empty.
    persistentVolumeClaimSpec: {}
      # storageClassName: ""
      # volumeName: ""
  cluster:
    # -- Number of ClickHouse shards in the cluster.
    shards: 1
    # -- Number of ClickHouse replicas in each shard.
    replicas: 1
    # -- To use a pre-installed ZooKeeper for ClickHouse data replication, please
    # provide a list of your ZooKeeper hosts. To install a customized ZooKeeper,
    # refer to <https://github.com/Altinity/clickhouse-operator/blob/master/docs/zookeeper_setup.md>
    zookeeperHosts: []
      # - zookeeper.flow-visibility
    # Specification to install a default ZooKeeper cluster. This is ignored
    # if zookeeperHosts are provided. 
    installZookeeper:
      # -- Memory size for each ZooKeeper pod. Can be a plain integer or as a
      # fixed-point number using one of these quantity suffixes: E, P, T, G, M, K.
      # Or the power-of-two equivalents: Ei, Pi, Ti, Gi, Mi, Ki.
      size: "5Gi"
      # -- Number of ZooKeeper replicas. It is recommended to be odd. When deploying
      # ClickHouse cluster with more than 1 replica, 3 is the minimum number of ZooKeeper
      # hosts required to manage replication and fault tolerance. Please refer to
      # <https://zookeeper.apache.org/doc/current/zookeeperStarted.html#sc_RunningReplicatedZooKeeper>
      # for more information.
      replicas: 1
      # -- Container image used by the ZooKeeper.
      image:
        repository: "projects.registry.vmware.com/antrea/theia-zookeeper"
        pullPolicy: "IfNotPresent"
        tag: "3.8.0"
      # -- Set securityContext.
      # Use a specific uid, gid for zookeeper.
      securityContext:
        runAsUser: 1000
        fsGroup: 1000 
    # -- Affinity for the ClickHouse Pods. By default, it allows only one ClickHouse
    # instance per Node. Please refer to
    # <https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/99-clickhouseinstallation-max.yaml>
    # for other distributions.
    podDistribution:
      - type: MaxNumberPerNode
        number: 1
        topologyKey: "kubernetes.io/hostname"
grafana:
  # -- Determine whether to install Grafana. It is used as a data visualization
  # and monitoring tool.  
  enable: true
  # -- Grafana logging options.
  log:
    # -- Logging mode. Options are “console”, “file”, and “syslog”. Default is “console” and “file”.
    # Use spaces to separate multiple modes, e.g. console file
    mode: "console file"
    # -- Logging level. Options are “debug”, “info”, “warn”, “error”, and “critical”. Default is info.
    level: info
    # -- Enable automated log rotation, valid options are false or true. Default is true.
    # When enabled use the max_lines, max_size_shift, daily_rotate and max_days to configure
    # the behavior of the log rotation. Only applicable when “file” used in [log] mode.
    log_rotate: "true"
    # -- Maximum lines per file before rotating it. Default is "1000000".
    # Only applicable when “file” used in [log] mode.
    max_lines: "1000000"
    # -- Maximum size of file before rotating it. Default is "27", which means 1 << 27, 128MB.
    # Only applicable when “file” used in [log] mode.
    max_size_shift: "27"
    # -- Enable daily rotation of files, valid options are false or true. Default is true.
    # Only applicable when “file” used in [log] mode.
    daily_rotate: "true"
    # -- Maximum number of days to keep log files. Default is "7".
    # Only applicable when “file” used in [log] mode.
    max_days: "7"
  # -- Set securityContext.
  # Use a specific uid, gid for grafana.
  securityContext:
    fsGroup: 472
    supplementalGroups:
      - 0 
  # -- Container image used by Grafana.
  image: 
    repository: "projects.registry.vmware.com/antrea/theia-grafana"
    pullPolicy: "IfNotPresent"
    tag: "8.3.3"
  # -- Credentials to login to Grafana. They will be stored in a Secret.
  loginSecret:
    username: "admin"
    password: "admin"
  service:
    # -- The type of Service exposing Grafana. It must be one of NodePort or
    # LoadBalancer.
    type: NodePort
    # -- TCP port number for the Grafana service.
    tcpPort: 3000
  # -- Grafana plugins to install.
  installPlugins:  
    - https://downloads.antrea.io/artifacts/grafana-custom-plugins/theia-grafana-sankey-plugin-1.0.2.zip;theia-grafana-sankey-plugin
    - https://downloads.antrea.io/artifacts/grafana-custom-plugins/theia-grafana-chord-plugin-1.0.1.zip;theia-grafana-chord-plugin
    - grafana-clickhouse-datasource 1.0.1
  # -- The dashboards to be displayed in Grafana UI. The files must be put under
  # provisioning/dashboards.
  dashboards:
    - homepage.json
    - flow_records_dashboard.json
    - pod_to_pod_dashboard.json
    - pod_to_service_dashboard.json
    - pod_to_external_dashboard.json
    - node_to_node_dashboard.json
    - networkpolicy_dashboard.json
  # -- Default home dashboard.
  homeDashboard: homepage.json
  storage:
    # -- Grafana storage size. It is used to store Grafana configuration files.
    # Can be a plain integer or as a fixed-point number using one of these
    # quantity suffixes: E, P, T, G, M, K. Or the power-of-two equivalents:
    # Ei, Pi, Ti, Gi, Mi, Ki.
    size: "1Gi"
    createPersistentVolume:
      # -- Type of PersistentVolume. Can be set to "HostPath", "Local" or "NFS".
      # Please set this value to use a PersistentVolume created by Theia.
      type: "HostPath"
      hostPath:
        # -- The host path. Required when type is "HostPath".
        path: "/data/grafana"
      local:
        # -- The local path. Required when type is "Local".
        path: "/data/grafana"
        # -- Affinity for the Local PersistentVolume. By default it requires to
        # label the Node used to store the Grafana configuration files with
        # "antrea.io/grafana-config-node=".
        affinity: {}
      nfs:
        # -- The NFS server hostname or IP address. Required when type is "NFS".
        host: ""
        # -- The path exported on the NFS server. Required when type is "NFS".
        path: ""
    # -- Specification for PersistentVolumeClaim. This is ignored if
    # createPersistentVolume.type is non-empty. To use a custom PersistentVolume,
    # please set
    # storageClassName: ""
    # volumeName: "<my-pv>".
    # To dynamically provision a PersistentVolume, please set
    # storageClassName: "<my-storage-class>".
    # HostPath storage is used if both createPersistentVolume.type and
    # persistentVolumeClaimSpec are empty.
    persistentVolumeClaimSpec: {}
      # storageClassName: ""
      # volumeName: ""
sparkOperator:
  # -- Determine whether to install Spark Operator. It is required to run Network
  # Policy Recommendation jobs.
  enable: false
  # -- Name of Spark Operator.
  name: "policy-recommendation"
  # -- Container image used by Spark Operator.
  image: 
    repository: "projects.registry.vmware.com/antrea/theia-spark-operator"
    pullPolicy: "IfNotPresent"
    tag: "v1beta2-1.3.3-3.1.1"
theiaManager:
  # -- Determine whether to install Theia Manager.
  enable: false
  # -- Container image used by Theia Manager.
  image:
    repository: "projects.registry.vmware.com/antrea/theia-manager"
    pullPolicy: "IfNotPresent"
    tag: ""
  # apiServer contains APIServer related configuration options.
  apiServer:
    # -- The port for the Theia Manager APIServer to serve on.
    apiPort: 11347
    # -- Indicates whether to use auto-generated self-signed TLS certificates. If
    # false, a Secret named "theia-manager-tls" must be provided with the
    # following keys: ca.crt, tls.crt, tls.key.
    selfSignedCert: true
    # -- Comma-separated list of cipher suites that will be used by the Theia Manager
    # APIservers. If empty, the default Go Cipher Suites will be used.
    tlsCipherSuites: ""
    # -- TLS min version from: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
    tlsMinVersion: ""
  # -- Log verbosity switch for Theia Manager.
  logVerbosity: 0
